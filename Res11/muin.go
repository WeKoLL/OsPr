package main

import (
	"bytes"
	"fmt"
	"image/color"
	"log"
	"math"
	"os"
	"strconv"
	"strings"
	"time"

	"github.com/Knetic/govaluate"
	"github.com/fogleman/gg"
	"gopkg.in/telebot.v3"
)

// BotConfig —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞
type BotConfig struct {
	TelegramAPIToken string
}

func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	config := BotConfig{
		TelegramAPIToken: os.Getenv("TELEGRAM_BOT_TOKEN"),
	}
	
	if config.TelegramAPIToken == "" {
		log.Fatal("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
	}

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞
	botSettings := telebot.Settings{
		Token:  config.TelegramAPIToken,
		Poller: &telebot.LongPoller{Timeout: 10 * time.Second},
	}

	bot, err := telebot.NewBot(botSettings)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: ", err)
	}

	// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	bot.Handle("/start", func(ctx telebot.Context) error {
		welcomeMessage := `‚ú® <b>–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–ª–æ—â–∞–¥–µ–π</b> ‚ú®

–Ø –ø–æ–º–æ–≥—É –≤—ã—á–∏—Å–ª–∏—Ç—å –ø–ª–æ—â–∞–¥—å –ø–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ.

üìù <b>–§–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:</b>
<code>—Ñ—É–Ω–∫—Ü–∏—è –Ω–∏–∂–Ω—è—è_–≥—Ä–∞–Ω–∏—Ü–∞ –≤–µ—Ä—Ö–Ω—è—è_–≥—Ä–∞–Ω–∏—Ü–∞</code>

üìå <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
<code>sin(x) 0 3.14</code> - –ø–ª–æ—â–∞–¥—å —Å–∏–Ω—É—Å–æ–∏–¥—ã
<code>x^2 0 5</code> - –ø–ª–æ—â–∞–¥—å –ø–∞—Ä–∞–±–æ–ª—ã
<code>sqrt(4-x^2) -2 2</code> - –ø–ª–æ—â–∞–¥—å –ø–æ–ª—É–∫—Ä—É–≥–∞

üîß <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b> +, -, *, /, ^
üìê <b>–§—É–Ω–∫—Ü–∏–∏:</b> sin, cos, tan, sqrt, log, exp, abs
üìè <b>–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã:</b> pi, e`

		return ctx.Send(welcomeMessage, telebot.ModeHTML)
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
	bot.Handle(telebot.OnText, func(ctx telebot.Context) error {
		userInput := ctx.Text()
		inputParts := strings.Fields(userInput)
		
		if len(inputParts) != 3 {
			return ctx.Reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <—Ñ—É–Ω–∫—Ü–∏—è> <a> <b>\n–ü—Ä–∏–º–µ—Ä: sin(x) 0 3.14")
		}

		funcExpression := inputParts[0]
		lowerBound, err1 := strconv.ParseFloat(inputParts[1], 64)
		upperBound, err2 := strconv.ParseFloat(inputParts[2], 64)
		
		if err1 != nil || err2 != nil {
			return ctx.Reply("üî¢ –û—à–∏–±–∫–∞ –≤ –≥—Ä–∞–Ω–∏—Ü–∞—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–∞.\n–ü—Ä–∏–º–µ—Ä: 0 3.14")
		}

		if lowerBound >= upperBound {
			return ctx.Reply("‚ÜóÔ∏è –õ–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –ø—Ä–∞–≤–æ–π!")
		}

		computedArea, calcErr := computeIntegral(funcExpression, lowerBound, upperBound)
		if calcErr != nil {
			return ctx.Reply(fmt.Sprintf("üßÆ –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: %v", calcErr))
		}

		graphImage, plotErr := createFunctionPlot(funcExpression, lowerBound, upperBound, computedArea)
		if plotErr != nil {
			return ctx.Reply(fmt.Sprintf("üñºÔ∏è –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: %v", plotErr))
		}

		resultCaption := fmt.Sprintf(
			"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç</b>\n\n–§—É–Ω–∫—Ü–∏—è: <code>%s</code>\n–ò–Ω—Ç–µ—Ä–≤–∞–ª: [%.2f, %.2f]\n–ü–ª–æ—â–∞–¥—å: <code>%.4f</code>",
			funcExpression, lowerBound, upperBound, computedArea,
		)
		
		return ctx.Send(
			&telebot.Photo{File: telebot.FromReader(graphImage), Caption: resultCaption},
			telebot.ModeHTML,
		)
	})

	log.Println("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
	bot.Start()
}

func computeIntegral(funcExpr string, start, end float64) (float64, error) {
	const segments = 1000
	stepSize := (end - start) / segments
	totalArea := 0.0

	for i := 0; i <= segments; i++ {
		currentX := start + float64(i)*stepSize
		funcValue, err := evaluateMathExpression(funcExpr, currentX)
		if err != nil {
			return 0, err
		}

		// –ü—Ä–∞–≤–∏–ª–æ —Ç—Ä–∞–ø–µ—Ü–∏–π
		if i == 0 || i == segments {
			totalArea += funcValue
		} else {
			totalArea += 2 * funcValue
		}
	}

	return totalArea * stepSize / 2, nil
}

func evaluateMathExpression(expr string, xValue float64) (float64, error) {
	// –ó–∞–º–µ–Ω—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Å—Ç–µ–ø–µ–Ω–µ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
	expr = strings.ReplaceAll(expr, "^", "**")

	functions := map[string]govaluate.ExpressionFunction{
		"sin": func(args ...interface{}) (interface{}, error) {
			return math.Sin(args[0].(float64)), nil
		},
		"cos": func(args ...interface{}) (interface{}, error) {
			return math.Cos(args[0].(float64)), nil
		},
		"tan": func(args ...interface{}) (interface{}, error) {
			return math.Tan(args[0].(float64)), nil
		},
		"sqrt": func(args ...interface{}) (interface{}, error) {
			return math.Sqrt(args[0].(float64)), nil
		},
		"log": func(args ...interface{}) (interface{}, error) {
			return math.Log(args[0].(float64)), nil
		},
		"exp": func(args ...interface{}) (interface{}, error) {
			return math.Exp(args[0].(float64)), nil
		},
		"abs": func(args ...interface{}) (interface{}, error) {
			return math.Abs(args[0].(float64)), nil
		},
	}

	parameters := map[string]interface{}{
		"x":  xValue,
		"pi": math.Pi,
		"e":  math.E,
	}

	expression, err := govaluate.NewEvaluableExpressionWithFunctions(expr, functions)
	if err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏: %v", err)
	}

	result, err := expression.Evaluate(parameters)
	if err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: %v", err)
	}

	switch v := result.(type) {
	case float64:
		return v, nil
	case int:
		return float64(v), nil
	default:
		return 0, fmt.Errorf("–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: %T", result)
	}
}

func createFunctionPlot(funcExpr string, start, end, area float64) (*bytes.Buffer, error) {
	const (
		imageWidth  = 800
		imageHeight = 600
		margin      = 50.0
	)

	canvas := gg.NewContext(imageWidth, imageHeight)

	// –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞
	canvas.SetColor(color.RGBA{245, 245, 245, 255})
	canvas.Clear()
	canvas.SetColor(color.Black)

	// –û—Å–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
	canvas.SetLineWidth(2)
	canvas.DrawLine(margin, imageHeight-margin, imageWidth-margin, imageHeight-margin)
	canvas.DrawLine(margin, margin, margin, imageHeight-margin)
	canvas.Stroke()

	// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –≥—Ä–∞—Ñ–∏–∫–∞
	pointCount := imageWidth - int(2*margin)
	values := make([]float64, pointCount)
	
	for i := range values {
		x := start + (end-start)*float64(i)/float64(pointCount-1)
		y, err := evaluateMathExpression(funcExpr, x)
		if err != nil {
			return nil, err
		}
		values[i] = y
	}

	// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞
	minVal, maxVal := math.Inf(1), math.Inf(-1)
	for _, y := range values {
		if y < minVal {
			minVal = y
		}
		if y > maxVal {
			maxVal = y
		}
	}

	verticalScale := (imageHeight - 2*margin) / (maxVal - minVal)

	// –ó–∞–ª–∏–≤–∫–∞ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–¥ –∫—Ä–∏–≤–æ–π
	canvas.SetColor(color.RGBA{70, 130, 180, 150})
	canvas.MoveTo(margin, imageHeight-margin)
	for i, y := range values {
		x := margin + float64(i)
		scaledY := imageHeight - margin - (y-minVal)*verticalScale
		canvas.LineTo(x, scaledY)
	}
	canvas.LineTo(imageWidth-margin, imageHeight-margin)
	canvas.ClosePath()
	canvas.Fill()

	// –†–∏—Å–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
	canvas.SetColor(color.RGBA{25, 25, 112, 255})
	canvas.SetLineWidth(3)
	for i, y := range values {
		x := margin + float64(i)
		scaledY := imageHeight - margin - (y-minVal)*verticalScale
		if i == 0 {
			canvas.MoveTo(x, scaledY)
		} else {
			canvas.LineTo(x, scaledY)
		}
	}
	canvas.Stroke()

	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
	canvas.SetColor(color.Black)
	if err := canvas.LoadFontFace("Arial.ttf", 20); err == nil {
		canvas.DrawStringAnchored(fmt.Sprintf("y = %s", funcExpr), imageWidth/2, margin+30, 0.5, 0.5)
		canvas.DrawStringAnchored(fmt.Sprintf("–ü–ª–æ—â–∞–¥—å: %.4f", area), imageWidth/2, imageHeight-margin-30, 0.5, 0.5)
	} else {
		canvas.DrawStringAnchored(fmt.Sprintf("y = %s", funcExpr), imageWidth/2, margin+20, 0.5, 0.5)
		canvas.DrawStringAnchored(fmt.Sprintf("–ü–ª–æ—â–∞–¥—å: %.4f", area), imageWidth/2, imageHeight-margin-20, 0.5, 0.5)
	}

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
	imageBuffer := new(bytes.Buffer)
	if err := canvas.EncodePNG(imageBuffer); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: %v", err)
	}

	return imageBuffer, nil
}